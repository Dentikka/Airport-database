---------------------содание -----------------------

set DATEFORMAT dmy
DROP TABLE IF EXISTS Tariffs
DROP TABLE IF EXISTS Standarts
DROP TABLE IF EXISTS Counter_readings
DROP TABLE IF EXISTS Counters
DROP TABLE IF EXISTS Used_services
DROP TABLE IF EXISTS Bills
DROP TABLE IF EXISTS Payments
DROP TABLE IF EXISTS Owners
DROP TABLE IF EXISTS Dwellers
DROP TABLE IF EXISTS People
DROP TABLE IF EXISTS Accomodations
DROP TABLE IF EXISTS Required_services
DROP TABLE IF EXISTS [Services]
DROP TABLE IF EXISTS Accounts

CREATE TABLE Accounts (
	account_id INT NOT NULL PRIMARY KEY IDENTITY, 
	score FLOAT
);
CREATE TABLE Accomodations (
	accomodation_id INT NOT NULL PRIMARY KEY IDENTITY,
	location_id INT, 
	adress VARCHAR(30), 
	[square] FLOAT, 
	account_id INT
);

CREATE TABLE People (
	person_id INT NOT NULL PRIMARY KEY IDENTITY, 
	first_name VARCHAR(20),
	last_name VARCHAR(20),
	has_privilege BINARY
);

CREATE TABLE Owners (
	owner_id INT NOT NULL PRIMARY KEY IDENTITY,
	account_id INT,
	person_id INT,
	share FLOAT
);

CREATE TABLE Dwellers (
	dweller_id INT NOT NULL PRIMARY KEY IDENTITY, 
	person_id INT,
	accomodation_id INT,
	settle_date DATE,
	eviction_date DATE
);
CREATE TABLE Tariffs (
	tariff_id INT NOT NULL PRIMARY KEY IDENTITY,
	service_id INT,
	rate FLOAT,
	[start_date] DATE
);

CREATE TABLE Standarts (
	standart_id INT NOT NULL PRIMARY KEY IDENTITY,
	service_id INT,
	[value] FLOAT,
	[start_date] DATE
);

CREATE TABLE [Services] (
	service_id INT NOT NULL PRIMARY KEY IDENTITY,
	[name] VARCHAR(20),
	unit VARCHAR(15)
);

CREATE TABLE Counters (
	counter_id INT NOT NULL PRIMARY KEY IDENTITY,
	verification_date DATE,
	account_id INT, 
	service_id INT
);

CREATE TABLE Counter_readings (
	reading_id INT NOT NULL PRIMARY KEY IDENTITY,
	counter_id INT,
	reading_date DATE,
	[value] FLOAT
);

CREATE TABLE Required_services (
	required_service_id INT NOT NULL PRIMARY KEY IDENTITY,
	[start_date] DATE,
	finish_date DATE,
	service_id INT,
	account_id INT
);

CREATE TABLE Used_services (
	used_service_id INT NOT NULL PRIMARY KEY IDENTITY, 
	[period] DATE,
	amount FLOAT,
	required_service_id INT,
	bill_id INT
);

CREATE TABLE Bills (
	bill_id INT NOT NULL PRIMARY KEY IDENTITY,
	size FLOAT,
	bill_date DATE
);

CREATE TABLE Payments (
	payment_id INT NOT NULL PRIMARY KEY IDENTITY,
	size FLOAT,
	account_id INT
);

ALTER TABLE Accomodations ADD
	FOREIGN KEY (account_id)
	REFERENCES Accounts (account_id),
	FOREIGN KEY (location_id)
	REFERENCES Accomodations (accomodation_id)

ALTER TABLE Payments ADD
	FOREIGN KEY (account_id)
	REFERENCES Accounts (account_id)

ALTER TABLE Owners ADD
	FOREIGN KEY (person_id)
	REFERENCES People (person_id),
	FOREIGN KEY (account_id)
	REFERENCES Accounts (account_id)

ALTER TABLE Dwellers ADD
	FOREIGN KEY (person_id)
	REFERENCES People (person_id),
	FOREIGN KEY (accomodation_id)
	REFERENCES Accomodations (accomodation_id)

ALTER TABLE Tariffs ADD
	FOREIGN KEY (service_id)
	REFERENCES [Services] (service_id)

ALTER TABLE Standarts ADD
	FOREIGN KEY (service_id)
	REFERENCES [Services] (service_id)

ALTER TABLE Counters ADD
	FOREIGN KEY (account_id)
	REFERENCES Accounts (account_id),
	FOREIGN KEY (service_id)
	REFERENCES [Services] (service_id)

ALTER TABLE Counter_readings ADD
	FOREIGN KEY (counter_id)
	REFERENCES Counters (counter_id)

ALTER TABLE Required_services ADD
	FOREIGN KEY (account_id)
	REFERENCES Accounts (account_id),
	FOREIGN KEY (service_id)
	REFERENCES [Services] (service_id)

ALTER TABLE Used_services ADD
	FOREIGN KEY (required_service_id)
	REFERENCES Required_services (required_service_id),
	FOREIGN KEY (bill_id)
	REFERENCES Bills (bill_id)